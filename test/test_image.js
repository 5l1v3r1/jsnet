const {assertClose} = require('./test');
const jsnet = require('../build/build');

function testPadImages() {
    const image = new jsnet.Tensor([2, 4, 2, 3], [0.510, -1.990, 0.680, -2.280, 0.910, 0.070, 0.800, -0.060, -0.540, 0.020, -1.990, 1.820, -0.050, 2.630, 1.630, 0.430, 1.050, 0.320, 0.790, -0.530, -0.350, -1.220, 0.060, -0.640, -1.300, 0.380, 0.380, 0.540, 0.130, -2.820, 0.340, -1.170, -0.360, 2.380, -1.760, -0.340, -0.240, 0.190, -0.170, -0.700, 0.910, -0.620, -0.970, -0.230, -0.330, 1.710, -1.470, -0.210]);
    const padded = new jsnet.Tensor([2, 7, 9, 3], [0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.510, -1.990, 0.680, -2.280, 0.910, 0.070, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.800, -0.060, -0.540, 0.020, -1.990, 1.820, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -0.050, 2.630, 1.630, 0.430, 1.050, 0.320, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.790, -0.530, -0.350, -1.220, 0.060, -0.640, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -1.300, 0.380, 0.380, 0.540, 0.130, -2.820, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.340, -1.170, -0.360, 2.380, -1.760, -0.340, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -0.240, 0.190, -0.170, -0.700, 0.910, -0.620, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, -0.970, -0.230, -0.330, 1.710, -1.470, -0.210, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000, 0.000]);
    const upstream = new jsnet.Tensor([2, 7, 9, 3], [0.500, 0.060, -0.640, -0.180, -1.590, -0.240, 0.060, -0.250, -0.770, 1.680, -2.370, 0.020, 0.940, -0.090, 1.090, 2.750, -2.090, 0.760, 1.950, -0.420, -0.730, -1.060, 0.550, -0.090, 0.690, -0.620, 0.450, 2.800, -0.540, -1.580, 0.930, 0.450, 0.060, 0.410, -0.930, -1.520, -0.890, -0.580, -0.080, -0.040, -0.430, -0.960, 0.640, 0.020, -0.250, 0.460, 0.000, 0.760, -1.110, -0.470, 1.560, 0.110, -0.560, -1.460, -0.810, -1.160, 1.190, 0.740, -0.550, -0.840, -2.050, 1.410, 0.370, -0.190, 0.380, -0.340, 0.370, 0.590, -0.400, 0.740, -0.560, -1.430, 0.150, 2.260, -0.250, 0.340, 0.240, -0.390, -0.170, 0.080, 0.110, 1.670, 0.570, -0.170, 0.300, 0.700, -0.930, 1.080, -0.500, -1.690, 0.360, 1.000, 0.160, -0.390, 1.150, -0.680, 0.500, 0.210, 0.090, -1.880, -0.760, -1.550, 1.150, -1.030, 0.030, 1.920, 0.040, -0.530, -1.610, 0.390, 1.090, -0.820, -0.990, 2.980, 0.620, 0.720, -1.130, 0.450, 0.710, 1.560, 0.020, -0.180, -2.330, -0.010, -0.750, -0.970, 0.720, -0.220, -0.780, -2.450, -2.180, -1.160, 0.110, 0.680, -0.190, -0.020, -0.330, -1.050, -1.440, 0.510, -2.360, -0.370, 1.740, -0.350, -0.270, -2.100, 0.400, -1.580, 0.180, -1.940, 1.530, -0.680, -2.430, -0.140, -0.250, -0.970, -0.910, 0.050, 0.150, -0.540, 1.650, 0.150, -0.500, 0.190, -1.810, -0.510, -0.010, 0.710, -0.450, 0.950, -0.870, -0.300, -2.130, -0.190, 1.310, 0.580, -1.110, -0.980, -0.400, -0.110, 0.200, 0.040, 0.720, 0.710, 1.320, 0.370, 1.820, 0.770, 0.330, 1.070, 0.110, 1.030, 1.190, -1.410, 0.780, -0.590, 1.240, 2.170, -1.380, -1.470, 0.130, -0.520, 1.180, -1.480, -0.240, 0.810, 1.640, 1.440, -0.720, -1.980, -0.240, -0.250, 0.250, 0.750, -0.270, 0.040, 0.860, 0.300, 1.290, -0.480, 0.750, 0.540, 0.310, -0.220, 0.420, -0.740, -0.240, -1.460, 0.450, -1.190, -1.210, 1.670, 0.050, 0.190, 0.010, -1.000, -0.140, 0.540, -0.710, 1.740, 1.040, 0.960, 0.130, 1.320, -0.510, -0.960, -1.300, -0.040, 0.310, -0.150, -0.990, -0.340, 0.660, 1.410, 0.070, -0.230, 1.230, -0.130, 1.390, 2.000, -1.090, 0.700, 0.870, -0.860, 0.760, 1.770, -0.040, 2.200, -0.480, 0.120, -0.480, -0.490, 0.120, -0.610, -0.580, -1.460, -0.390, 0.610, 1.920, -0.230, -0.350, 1.230, 1.750, 0.250, -0.660, -0.980, -1.100, -0.070, -1.490, -0.210, -0.080, 0.870, 1.520, -1.920, 1.120, 0.300, 1.240, 0.110, -0.720, -0.680, 0.030, 1.750, 0.750, 0.370, -0.350, 0.820, -0.390, -2.140, -2.120, 0.670, -0.480, 0.280, 0.130, -0.270, -0.810, -1.650, -0.700, -1.190, 1.770, 0.140, -0.210, 0.030, 1.270, -2.460, -0.440, -1.080, 0.270, 0.300, -0.950, 2.150, -1.120, 1.000, -1.110, 1.010, -2.360, -1.110, -0.380, -0.760, -1.000, 1.490, -0.040, 0.680, 1.750, 0.060, -2.560, -0.210, -0.370, 0.990, 1.150, -0.650, 1.330, -0.440, 1.030, 0.440, 0.310, 0.330, -0.930, -0.900, -0.020, 0.710, -0.170, -0.280, -0.600, 1.650, 0.080, -0.020, -0.680, -1.160, -0.340, -0.140, 1.560, 1.840, -1.660, -2.060, 0.980, -0.250, 0.040, 0.000]);
    const grad = new jsnet.Tensor([2, 4, 2, 3], [-0.890, -0.580, -0.080, -0.040, -0.430, -0.960, -0.190, 0.380, -0.340, 0.370, 0.590, -0.400, 0.360, 1.000, 0.160, -0.390, 1.150, -0.680, 0.450, 0.710, 1.560, 0.020, -0.180, -2.330, -0.740, -0.240, -1.460, 0.450, -1.190, -1.210, 0.660, 1.410, 0.070, -0.230, 1.230, -0.130, -0.230, -0.350, 1.230, 1.750, 0.250, -0.660, -0.390, -2.140, -2.120, 0.670, -0.480, 0.280])

    const imageVar = new jsnet.Variable(image);
    const actualOut = jsnet.padImages(imageVar, 1, 4, 2, 3)
    assertClose(padded, actualOut.value);
    actualOut.backward(upstream);
    assertClose(imageVar.gradient, grad);
}

testPadImages();
console.log('PASS');
